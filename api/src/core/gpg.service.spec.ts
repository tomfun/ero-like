import { Test, TestingModule } from '@nestjs/testing';
import { GpgService } from './gpg.service';

describe('AppController', () => {
  let gpgService: GpgService;

  beforeEach(async () => {
    const app: TestingModule = await Test.createTestingModule({
      providers: [GpgService],
    }).compile();

    gpgService = app.get<GpgService>(GpgService);
  });

  it('temporaryImportAndVerify should return proper keys', async () => {
    const clearSignArmored = {
      hash: 'SHA512',
      clear:
        'I read and agree with all terms of use of ero-like and confirm my registration on ero-like',
      signBlock:
        '-----BEGIN PGP SIGNATURE-----\n\niQIzBAEBCgAdFiEEBfntiBKqjNUqcWskquatlAIqu/EFAmQCVw8ACgkQquatlAIq\nu/GJRw//fpu1Y0FqfN1HITc+hnUvptoWT8i98dF2RFBIyinly+KvgHSQJHjUr1Ks\njNgw+BHMkj9weG2VVH5xGNUrP3j7GYKIUAnniDBLUm1HE/XDq2mSCzc0cpX7reGy\nuhK4RFKykBIe2oF8PElNBfl/iTofcDNU6CVAfvGhpa+yX5GCrgF2UF7mSfYJqAAx\nbqWAtUUfKOS9eDtlmSI618kKF7Fz936sYKfThjiKJ9W8leF7BHt+4bVa0mLY4r65\nqSX9yUwDNB9q1QzDylM/jEmcXtD9Nf87wOXUh7omlOQmUozDnTX8IJiws+ImPipG\nPpFTvhSFmDHm+8oDWkj27I1ZfdQDI8GWpzXkIQwTUheZZiIainZ8Zce2otaf0d0J\nb3sQm+eIf+NPKcMelMqNrByriY9WJRbqNSTn5G20qWBq7fsxXPDvxRy+taGdctQi\nGkh84VlfF8+/q8/P5NCx8DJgmKU/HctB/Ns8aHTmZCf4Fm0R5yCU9tozVoaUyqw+\n2vFA2Qmg0WEPXQs+inqIKw9UMH+oy4soHX3pSiXqv0Van9ysPvJ7x9nz2taI5XCA\nGc6PnN4QW6xZog/IsaoykiOFhW28hMXTMCYGvjbspWw4JtiqehzgyS8jY9nrToub\nQIdSswmBJN8Sp8eNQ9jjGAvJZOzhBBMnFD1NAkbTBJ4zZb02bbY=\n=PjF2\n-----END PGP SIGNATURE-----',
      signature:
        '7E9BB563416A7CDD4721373E86752FA6DA164FC8BDF1D176445048CA29E5CBE2AF8074902478D4AF52AC8CD830F811CC923F70786D95547E7118D52B3F78FB1982885009E788304B526D4713F5C3AB69920B37347295FBADE1B2BA12B84452B290121EDA817C3C494D05F97F893A1F703354E825407EF1A1A5AFB25F9182AE0176505EE649F609A800316EA580B5451F28E4BD783B6599223AD7C90A17B173F77EAC60A7D386388A27D5BC95E17B047B7EE1B55AD262D8E2BEB9A925FDC94C03341F6AD50CC3CA533F8C499C5ED0FD35FF3BC0E5D487BA2694E426528CC39D35FC2098B0B3E2263E2A463E9153BE14859831E6FBCA035A48F6EC8D597DD40323C196A735E4210C1352179966221A8A767C65C7B6A2D69FD1DD096F7B109BE7887FE34F29C31E94CA8DAC1CAB898F562516EA3524E7E46DB4A9606AEDFB315CF0EFC51CBEB5A19D72D4221A487CE1595F17CFBFABCFCFE4D0B1F0326098A53F1DCB41FCDB3C6874E66427F8166D11E72094F6DA33568694CAAC3EDAF140D909A0D1610F5D0B3E8A7A882B0F54307FA8CB8B281D7DE94A25EABF455A9FDCAC3EF27BC7D9F3DAD688E5708019CE8F9CDE105BAC59A20FC8B1AA32922385856DBC84C5D3302606BE36ECA56C3826D8AA7A1CE0C92F2363D9EB4E8B9B408752B3098124DF12A7C78D43D8E3180BC964ECE1041327143D4D0246D3049E3365BD366DB6',
    };
    const publicKeyArmored =
      '-----BEGIN PGP PUBLIC KEY BLOCK-----\n\n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\nyB2jQjJns1lWvQ==\n=qQ0g\n-----END PGP PUBLIC KEY BLOCK-----\n';
    const key1 = {
      publicKey0:
        'A7862A50B0D23632CC3F5810FC33AA31A411B6926319027AFDC5EEC7FF75BE92CB19E3A55D8933F44B534ABE9C3E78AEDC4EFDB1BEDF7B3EB786E2234531CE799505CB581A07E61AE9B8D0E31F405A14F0FE52CA43BAE88063D9D33F21B34024CE4D1B4A581AB2240B9A1F4FF1832AAD431637C8EC9AF98E0F933742C8FC9F3A18006E97D003CAAA7E8B924532791039570553A489D3E0DE64AE59349F81A5552064F88DAAD77352F8C7DC07BE576AA9F2CF42724DA24DD167314F918FC47A5BBBF320AEFFCA083B30226A0BBAE62A949F02A95731FBFBA4CB2FBE228CD86DA866BA67B9E302D62F68143E9CF11885443932C6F2FD90EB1B9D8504DAA3CB8262A05E20E864992ABF2141FABAA46712CE0690CF1CFC076AE59196BBF245E36F46962653B457837D7E3C83CFB941E75CBF60CE7BE57C535DEECD0326B05BA8409FC144E386EE0194E656586750BA893B00CE4ADA0797A8A5415B9E5F40E8486BC624344F2E96190C9D308E7479C5FFE78D32A2FE9E371094E8B7C25FC808056C7A292A13A1AE11D415D061582E0347D71479B194BEF1B4565369BE54F009E99D54649B13218DB3576E9ED2874A3838C6B9A3A6A219963BCFF38847D64B67B817E67822B7EA600ECBAB83A165BCC0AB55B3468FC7C0B0070555B3C34DD5CEB344FA75C112CD9A01BADACFAF5A0131AE0C12A88F8C866944D7D7CB427A059982ACA9',
      publicKey1: '010001',
      created: 1658763710,
      keyId: 'AAE6AD94022ABBF1',
      v4: '05F9ED8812AA8CD52A716B24AAE6AD94022ABBF1',
    };
    const key2 = {
      publicKey0:
        'F08EB42E8B574CE2F2B6729F785E939F945DA75A1B4BF6F8AEA6D9C8CA8EF7D78CE0D50CAAC520119A19C2A6302923BEE8EAF97C1A233B5517B13FBCAAE3DDDC033A884033170A4AE02197678E6FADA7AE0A455B355A153D2B305742B2A144F38DF38DFEE85BE68A7F07142D24AA5CF9C632628A98DC215848160C9819DDF1A5DE245B75D7B0A6937F2357E48AB360F472B237E72F98DC26A12BEEF1F557831DAEF2653EE0697EF98A74CBDC8E2FB2AB1605F7F5A3F42F96F80BC39A747C7611FF094F2AA25D4CB13CC6F4ABB926BB9CF8F7E40EE92176DCDE0437051321B46A80EB47BF25C1AA27C37A2370E03B684D2DFEFC4F2F9366496A391818B4DC5D0A34E08051ACDB44D18F0A31ED2E9F755564C9F7F54EE1FB05F5C45A45CA851A40EACE34B66B28508FD48BC13CE861DE3480CA1214003FD208EA9FCA4BD18E5C9E9A82E3FCDF5A2BF4516D8FDE578159F24D1BD6201094F4F60474D443E160E3889CFA5C9E711A3B842870BA7C4276EA3BE7EAAEAD6AD215A47DCDFA24236A3634B632B5560320580AC723BEF7558A6B308F6BD0F03DA4FF09FD44650BA132A73784BF554F806231D2C24A456673FF1F98C1D7150A7CD93CC2435ABF5D5309A4C76848675B1DACA793C88D225016F57426AFD9D4F207DB38F492245FC2C3CC65A8ABFE3A2DCE30EE89018EF6935BA7BC76ADB937B7A1632295F52DF1EC59E4B32D',
      publicKey1: '010001',
      created: 1658763710,
      keyId: '9E13AD316FB3A47D',
      v4: '1683A3A830F0FDDC09F713739E13AD316FB3A47D',
    };
    expect(
      await gpgService.temporaryImportAndVerify({
        clearSignArmored: `-----BEGIN PGP SIGNED MESSAGE-----\nHash: ${clearSignArmored.hash}\n\n${clearSignArmored.clear}\n${clearSignArmored.signBlock}`,
        publicKeyArmored,
      }),
    ).toBe({
      importedKeyUser: expect.stringMatching(
        /^Hryhorii \(Greg\) Kotov <gk@crosspay.net>|Grigory Kotov tomfun199@gmail.com$/,
      ),
      publicKeys: [
        {
          alg: '1',
          bits: '4096',
          type: '1-4096',
          capabilities: 'sc',
          // created: new Date('2022-07-25T15:41:50.000Z'),
          created: new Date(key1.created * 1000),
          expires: null,
          keyid: key1.v4,
          shortKeyId: key1.keyId,
          publicKeyFingerprint: key1.v4,
          pkey: [key1.publicKey0],
          // pkey: [key1.publicKey0, key1.publicKey1], todo
        },
        {
          alg: '1',
          bits: '4096',
          type: '1-4096',
          capabilities: 'e',
          created: new Date('2022-07-25T15:41:50.000Z'),
          expires: null,
          keyid: key2.v4,
          shortKeyId: key2.keyId,
          publicKeyFingerprint: key2.v4,
          pkey: [key2.publicKey0],
          // pkey: [key2.publicKey0, key2.publicKey1], todo
        },
      ],
      revocatedUserKeys: [],
      signature: clearSignArmored.signature,
      signatureAlgorithm: '1',
      signatureData: {
        clearSignDataPart: clearSignArmored.clear,
        clearSignSignaturePart: clearSignArmored.signBlock,
        hash: [clearSignArmored.hash],
        primaryKeyFingerprint: key1.v4,
        usedKeyFingerprint: key1.v4,
        usedKeyType: 'RSA',
        signatureDate: new Date('2023-03-03T20:22:39.000Z'),
      },
    });
  });
});
